---
# Создание необходимых директорий
- name: Create necessary directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
  loop:
    - "/usr/local/lib/systemd/system"
    - "/usr/local/sbin/runc"
    - "/opt/cni/bin"
    - "/etc/containerd"

# Активация требуемых модулей ядра
- name: Enable core modules
  become: true
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop:
    - "overlay"
    - "br_netfilter"
# Конфигурирование модулей ядра
- name: Configure core modules
  become: true
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    reload: true
    state: present
  loop:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }

# Загрузка архива containerd с проверкой контрольной суммы
- name: Download containerd archive
  ansible.builtin.get_url:
    url: "{{ containerd_link }}"
    dest: "/tmp/containerd_{{ containerd_version }}.tar.gz"
    checksum: "sha256:{{ containerd_link }}.sha256sum"
# Распаковка архива containerd
- name: Unpack containerd runtime archive
  become: true
  ansible.builtin.unarchive:
    src: "/tmp/containerd_{{ containerd_version }}.tar.gz"
    dest: "/usr/local"
    remote_src: yes
# Загрузка и установка в систему service файла containerd
- name: Download containerd service file
  become: true
  ansible.builtin.get_url:
    url: "{{ containerd_service_link }}"
    dest: "/usr/local/lib/systemd/system/containerd.service"
# Загрузка и установка компонента runc
- name: Download and install runc
  become: true
  ansible.builtin.get_url:
    url: "{{ runc_link }}"
    dest: "/usr/local/sbin/runc"
    mode: 755
# Создание символической ссылки на исполняемый фаайл runc
- name: Create runc link
  become: true
  ansible.builtin.file:
    src: "/usr/local/sbin/runc/runc.amd64"
    dest: "/usr/local/bin/runc"
    state: link
# Загрузка файлов CNI плагинов с проверкой контрольной суммы
- name: Download cni plugins archive
  ansible.builtin.get_url:
    url: "{{ cni_plugins_link }}"
    dest: "/tmp/cni_plugins_{{ cni_plugins_version }}.tar.gz"
    checksum: "sha256:{{ cni_plugins_link }}.sha256"
# Распаковка архива CNI плагинов
- name: Unpack cni plugins archive
  become: true
  ansible.builtin.unarchive:
    src: "/tmp/cni_plugins_{{ cni_plugins_version }}.tar.gz"
    dest: "/opt/cni/bin"
    remote_src: yes

# Формирование стандартного конфигурационного файла containerd
- name: Get default containerd config
  ansible.builtin.shell: "containerd config default"
  register: cfg_res
  changed_when: false
# Изменение настройки CGROUP в конфигурационном файле
- name: Change Cgroup setting
  ansible.builtin.set_fact:
    cfg: "{{ cfg_res.stdout | regex_replace('SystemdCgroup\\s?=\\s?false','SystemdCgroup = true',ignorecase=True) }}"
# Изменение настройки образа SandBox в конфигурационном файле
- name: Change sandbox image
  ansible.builtin.set_fact:
    cfg: "{{ cfg | regex_replace('sandbox_image\\s?=\\s?\".*\"', 'sandbox_image = \"'+containerd_sandbox_image+'\"', ignorecase=True) }}"
# Сохранение модифицированного конфигурационного файла
- name: Saving containerd configuration
  become: true
  ansible.builtin.copy:
    dest: "/etc/containerd/config.toml"
    content: "{{ cfg }}"

# Перезагрузка списка демонов и запуск containerd
- name: Reload Daemon
  become: true
  ansible.builtin.systemd:
    name: containerd
    daemon_reload: true
    enabled: true
    state: started
...
