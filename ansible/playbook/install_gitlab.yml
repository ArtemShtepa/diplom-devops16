---
- name: Install prerequirements
  hosts: gitlab
  tasks:
    - name: Create Gitlab directories
      ansible.builtin.file:
        path: "{{ gitlab_home }}/{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - ""
        - "data"
        - "config"
        - "logs"
    - name: Create GitLab configuration file
      ansible.builtin.template:
        src: "gitlab.rb.jinja2"
        dest: "{{ gitlab_home }}/config/gitlab.rb"
    - name: Run Gitlab container
      containers.podman.podman_container:
        name: gitlab
        image: "docker.io/gitlab/gitlab-ce:{{ gitlab_version }}-ce.0"
        state: started
        restart_policy: "always"
        generate_systemd:
          container_prefix: "podman"
          path: "~/.config/systemd/user/"
          restart_policy: "always"
        publish:
          - "22048:22"
          - "{{ gitlab_port }}:8081"
        volume:
          - "{{ gitlab_home }}/data:/var/opt/gitlab"
          - "{{ gitlab_home }}/logs:/var/log/gitlab"
          - "{{ gitlab_home }}/config:/etc/gitlab"
          - "/etc/timezone:/etc/timezone:ro"
          - "/etc/localtime:/etc/localtime:ro"
    - name: Wait for necessary directory
      ansible.builtin.wait_for:
        path: "{{ gitlab_home }}/{{ item }}"
        state: present
      loop:
        - "data/backups"
        - "data/git-data"

    - block:
      - name: Get initial password
        ansible.builtin.shell: "cat {{ gitlab_home }}/config/initial_root_password | grep Password:"
        ignore_errors: true
        changed_when: false
        register: cmd_res
      - name: Print root password
        ansible.builtin.debug:
          var: cmd_res.stdout
        when: cmd_res.rc == 0
      when: gitlab_backup is undefined or gitlab_backup == ""

    - name: Run as service
      ansible.builtin.systemd:
        name: podman-gitlab
        scope: user
        enabled: true
# Запуск playbook восстановление бэкапа если есть файл архива
    - name: Check backup file exists
      ansible.builtin.file:
        path: "files/{{ gitlab_backup }}"
        state: file
      delegate_to: localhost
      register: f_name
    - name: Wait until GitLab is ready
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ gitlab_port }}/"
        follow_redirects: safe
      register: url_res
      retries: 30
      delay: 10
      until: url_res.status == 200
      when: f_name.state == "file"
- name: Restore backup
  ansible.builtin.import_playbook: backup_restore.yml
  when: f_name.state == "file"
...
