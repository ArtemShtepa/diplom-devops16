---
- name: Install prerequirements
  hosts: gitlab
  vars:
    gitlab_image: "docker.io/gitlab/gitlab-ce:{{ gitlab_version }}-ce.0"
  tasks:
    # Создание директорий, необходимых для разворачивания GitLab
    - name: Create Gitlab directories
      ansible.builtin.file:
        path: "{{ gitlab_home }}/{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - ""
        - "data"
        - "config"
        - "logs"
    # Установка пакета jq
    - name: Install JQ package
      become: true
      ansible.builtin.package:
        name: "jq"
        state: present
    # Создание конфигурационного файла GitLab
    - name: Create GitLab configuration file
      ansible.builtin.template:
        src: "gitlab.rb.jinja2"
        dest: "{{ gitlab_home }}/config/gitlab.rb"
    # Проверка версии установленного GitLab по тегу образа
    - name: Check version of installed GitLab
      ansible.builtin.shell: "podman inspect gitlab | jq -r '.[] | .ImageName'"
      ignore_errors: true
      changed_when: false
      register: ver_res
    # Запуск контейнера GitLab
    - name: Run Gitlab container
      containers.podman.podman_container:
        name: gitlab
        image: "{{ gitlab_image }}"
        state: started
        restart_policy: "always"
        generate_systemd:
          container_prefix: "podman"
          path: "~/.config/systemd/user/"
          restart_policy: "always"
        publish:
          - "{{ gitlab_ssh_port }}:22"
          - "{{ gitlab_port }}:8081"
        volume:
          - "{{ gitlab_home }}/data:/var/opt/gitlab"
          - "{{ gitlab_home }}/logs:/var/log/gitlab"
          - "{{ gitlab_home }}/config:/etc/gitlab"
          - "/etc/timezone:/etc/timezone:ro"
          - "/etc/localtime:/etc/localtime:ro"
    # Ожидание создания контейнером GitLab некоторых директорий
    - name: Wait for necessary directory
      ansible.builtin.wait_for:
        path: "{{ gitlab_home }}/{{ item }}"
        state: present
      loop:
        - "data/backups"
        - "data/git-data"
    # Запуск GitLab в качестве сервиса
    - name: Run as service
      ansible.builtin.systemd:
        name: podman-gitlab
        scope: user
        enabled: true
    # Определение существования резервной копии GitLab
    - name: Determining need for GitLab readiness
      ansible.builtin.file:
        path: "files/{{ gitlab_backup }}"
        state: file
      delegate_to: localhost
      ignore_errors: true
      register: f_name
    # Блок вывода пароля администратора при инициализации GitLab
    - block:
      - name: Get initial password
        ansible.builtin.shell: "cat {{ gitlab_home }}/config/initial_root_password | grep Password:"
        ignore_errors: true
        changed_when: false
        register: cmd_res
      - name: Print root password
        ansible.builtin.debug:
          msg: "{{ cmd_res.stdout }}"
        when: cmd_res.rc == 0
      when: gitlab_backup is undefined or gitlab_backup == "" or f_name.state == "absent"
    # Перезагрузка машинки если обновился образ GitLab
    - name: Reboot machine
      become: true
      ansible.builtin.reboot:
        post_reboot_delay: 20
        reboot_timeout: 120
        connect_timeout: 180
        test_command: uptime
      when:
        - ver_res.stdout != gitlab_image
        - ver_res.stdout != "null"  # Контейнер есть, но поля нет ?
        - ver_res.stdout != ""      # Контейнер GitLab не найден
    # Ожидание готовности GitLab если будет запущено восстановление из резервной копии
    - name: Wait until GitLab is ready
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ gitlab_port }}/"
        follow_redirects: safe
      register: url_res
      retries: 36
      delay: 10
      until: url_res.status == 200
      when: f_name.state == "file"
# Передача управления на playbook восстановления резервной копии
- name: Restore backup
  ansible.builtin.import_playbook: backup_restore.yml
...
