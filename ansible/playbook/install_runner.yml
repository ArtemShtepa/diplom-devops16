---
# Добавление в Inventory хостов kubernetes кластера
- name: Add kubernetes hosts
  ansible.builtin.import_playbook: dynamic_inv.yml

# Создание директории Runner - в основном для хранения файла его установщика
- name: Create Runner directory
  hosts: runner
  gather_facts: false
  tasks:
    - name: Create directory
      ansible.builtin.file:
        path: "{{ runner_home }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

# Конфигурирование маршрутов для runner с внешнего IP на локальный
- name: Update host route configuration
  hosts: runner
  become: true
  tasks:
    # Разрешение IP Forward для перенаправления трафика с внешнего IP на локальный
    - name: Configure core modules
      ansible.posix.sysctl:
        name: "net.ipv4.ip_forward"
        value: "1"
        reload: true
        state: present
    # Установка пакета необходимого для фиксации маршрута как постоянного
    - name: Install iptables-persistent
      ansible.builtin.package:
        name: "iptables-persistent"
        state: present
    # Создание статического маршрута на GitLab с внешнего IP бастиона на локальный
    - name: Create route to GitLab
      ansible.builtin.command: "iptables -t nat -A OUTPUT -d {{ bastion_host }} -p tcp --dport {{ bastion_gitlab }} -j DNAT --to-destination {{ hostvars[groups.gitlab.0].ansible_host }}:{{ hostvars[groups.gitlab.0].gitlab_port }}"
      changed_when: false
    # Сохранение текущих маршрутов как постоянных
    - name: Save routes to persistent config
      ansible.builtin.shell: "iptables-save > /etc/iptables/rules.v4"
      changed_when: false

# Установка Runner прямо в систему и регистрация как SHELL
- name: Install GitLab Runner AS shell executor
  hosts: runner
  vars:
    repo_script: "{{ runner_home }}/repo-install.sh"
  tasks:
    # Проверка существования скрипта установки
    - name: Check repo installation script
      ansible.builtin.file:
        path: "{{ repo_script }}"
        state: "file"
      register: rep_rest
      ignore_errors: true
    # Блок загрузки скрипта установки
    - block:
      # Блок для пакетного менеджера APT
      - block:
        # Загрузка скрипта
        - name: Download installation script for DEB
          ansible.builtin.get_url:
            url: https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh
            dest: "{{ repo_script }}"
        # Pinning - привязка - смена приоритета репозитория для пакета
        - name: Apply APT pinning
          become: true
          ansible.builtin.copy:
            dest: "/etc/apt/preferences.d/pin-gitlab-runner.pref"
            content: |
              Explanation: Prefer GitLab provided packages over the Debian native ones
              Package: gitlab-runner
              Pin: origin packages.gitlab.com
              Pin-Priority: 1001
        when: ansible_pkg_mgr == "apt"
      # Загрузка скрипта для пакетных менеджеров YUM и DNF
      - name: Download installation script for RPM
        ansible.builtin.get_url:
          url: https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh
          dest: "{{ repo_script }}"
        when: ansible_pkg_mgr == "yum" or ansible_pkg_mgr == "dnf"
      # Исполнение скрипта - добавление репозитория GitLab Runner
      - name: Add GitLab repositories
        become: true
        ansible.builtin.command: "bash {{ runner_home }}/repo-install.sh"
      when: rep_rest.state == "absent"
    # Установка пакета GitLAb Runner
    - name: Install Runner package
      become: true
      ansible.builtin.package:
        name: gitlab-runner
        state: present
        update_cache: true
    # Запрос списка зарегистрированных runner - используется shell, так как вывод осуществляется строго в stderr
    - name: Get list of registered runners
      become: true
      ansible.builtin.shell: "gitlab-runner list"
      changed_when: false
      ignore_errors: true
      register: r_res
    # Проверка регистрации нашего Runner
    - name: Check shell runner existance
      ansible.builtin.set_fact:
        runner_list: "{{ r_res.stderr_lines | select('search', runner_name) }}"
    # Блок регистрации Runner
    - block:
      # Настройка диапазона разрешённых идентификаторов для UID
      - name: Configure UIDs for gitlab-runner
        become: true
        ansible.builtin.command: "usermod --add-subuids 10000-65535 gitlab-runner"
      # Настройка диапазона разрешённых идентификаторов для GID
      - name: Configure GIDs for gitlab-runner
        become: true
        ansible.builtin.command: "usermod --add-subgids 10000-65535 gitlab-runner"
      # Регистрация экземпляра Runner в исполнителе GitLab-Runner
      - name: Register shell runner
        become: true
        ansible.builtin.command:
          gitlab-runner register
          --non-interactive
          --name "{{ runner_name }}"
          --url "http://{{ bastion_host }}:{{ bastion_gitlab }}"
          --token "{{ runner_token }}"
          --executor "shell"
      when: runner_list | length == 0

# Установка Runner в виде контейнера podman и регистрация как DOCKER
# Не используется по техническим сложностям использования в проекте
# Оставлено для примера
- name: Install GitLab Runner AS docker executor
  hosts: runner
  tags:
    - never
  tasks:
    - name: Check configuration file
      ansible.builtin.stat:
        path: "{{ runner_home }}/config.toml"
      register: cfg_res
    - name: Generate configuration file
      ansible.builtin.shell: >-
        podman run --rm
        --volume {{ runner_home }}:/etc/gitlab-runner
        docker.io/gitlab/gitlab-runner:{{ runner_version }}
        register --non-interactive
        --url "http://{{ bastion_host }}:{{ bastion_gitlab }}"
        --token "{{ runner_token }}"
        --executor "docker"
        --docker-privileged=true
        --docker-image "{{ runner_image }}"
        --description "Builder for GoLang applications for linux"
      when: not cfg_res.stat.exists
    - name: Run Gitlab Runner container
      containers.podman.podman_container:
        name: runner-docker
        image: "docker.io/gitlab/gitlab-runner:{{ runner_version }}"
        state: started
        recreate: "{{ not cfg_res.stat.exists or cfg_res.changed }}"
        restart_policy: "always"
        generate_systemd:
          container_prefix: "podman"
          path: "~/.config/systemd/user/"
          restart_policy: "always"
        publish:
          - "{{ runner_port }}:8093"
        volume:
          - "{{ runner_home }}:/etc/gitlab-runner"
          - "/run/user/{{ ansible_user_uid }}/podman/podman.sock:/var/run/docker.sock"
          #- "/run/podman/podman.sock:/var/run/docker.sock"
    - name: Run as service
      ansible.builtin.systemd:
        name: podman-runner
        scope: user
        enabled: true

# Конфигурирование маршрутов для runner с внешнего IP на локальный
- name: Update registry list
  hosts: runner
  become: true
  vars:
    reg_cdt: "{{ lookup('file', '../../secrets/registry') | from_json }}"
  tasks:
    # Разрешение автозапуска сервисов пользователя
    - name: Enable podman running
      ansible.builtin.command: "loginctl enable-linger gitlab-runner"
    # Создание списка доступных registry для Docker образов - настраивается через внешний файл
    - name: Create registry list file
      ansible.builtin.template:
        src: "registry_list.jinja2"
        dest: "/etc/registry_list"

# Формирование каталога с файлами проекта приложения для qbec
- name: Create qbec project files
  hosts: runner
  gather_facts: false
  vars:
    project_path: "/home/gitlab-runner/deploy/"
  tasks:
    # Проверка присутствия qbec
    - name: Check qbec presence
      ansible.builtin.command: "sudo -u gitlab-runner qbec version"
      ignore_errors: true
      changed_when: false
      register: qb_res
    # Подключение tasks установки qbec
    - name: Install qbec
      include_tasks: tasks_qbec.yml
      when: qb_res.rc != 0
    # Блок формирования структуры проекта приложения
    - block:
      # формирование списка каталогов
      - name: Search qbec project directories
        ansible.builtin.find:
          paths: "templates/app"
          file_type: directory
          recurse: true
        register: dir_list
      # Формирование списка файлов
      - name: Search qbec project files
        ansible.builtin.find:
          paths: "templates/app"
          file_type: file
          recurse: true
        register: file_list
      delegate_to: localhost
    # Блок создания на машинке проекта приложения
    - block:
      # Создание каталогов
      - name: Create directories
        ansible.builtin.file:
          path: "{{ item.path | regex_replace('templates/app/', project_path) }}"
          state: "directory"
          owner: "gitlab-runner"
          group: "gitlab-runner"
        loop: "{{ dir_list.files }}"
      # Создание файлов по шаблонам - в некоторых используются адреса и порты, настраиваемые в переменных ansible
      - name: Create files
        ansible.builtin.template:
          src: "{{ item.path | regex_replace('templates/', '') }}"
          dest: "{{ item.path | regex_replace('templates/app/', project_path) }}"
          owner: "gitlab-runner"
          group: "gitlab-runner"
        loop: "{{ file_list.files }}"
      become: true
...
